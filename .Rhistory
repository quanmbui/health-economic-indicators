recorded_plot
lines(bwt.data.new$weight[bwt.data.new$id==n+1] ~ bwt.data.new$day[bwt.data.new$id==n+1], col="lightblue4", lty="solid", lwd=2)
polygon( c(predictrows$day, rev(predictrows$day)), c(lwr_rboth, rev(upr_rboth)), col=rgb(.1,0,1,0.4), border=NA )
lines(fit_rboth~predictrows$day, col="lightblue4", lty="dotted", lwd=3)
legend("bottomright", "Random Intercept and Random Slope Model", bty="n")
recorded_plot
lines(bwt.data.new$weight[bwt.data.new$id==n+1] ~ bwt.data.new$day[bwt.data.new$id==n+1], col="blue", lty="solid", lwd=2)
polygon( c(predictrows$day, rev(predictrows$day)), c(lwr_rboth, rev(upr_rboth)), col=rgb(.1,0,1,0.4), border=NA )
lines(fit_rboth~predictrows$day, col="blue", lty="dotted", lwd=3)
legend("bottomright", "Random Intercept and Random Slope Model", bty="n")
legend("bottomright", "Random Intercept and Random Slope Model")
legend("bottomright", "Random Intercept and Random Slope Model", bty = "n")
recorded_plot
lines(bwt.data.new$weight[bwt.data.new$id==n+1] ~ bwt.data.new$day[bwt.data.new$id==n+1], col="blue", lty="solid", lwd=2)
polygon( c(predictrows$day, rev(predictrows$day)), c(lwr_rboth, rev(upr_rboth)), col=rgb(.1,0,1,0.4), border=NA )
lines(fit_rboth~predictrows$day, col="blue", lty="dotted", lwd=3)
legend("bottomright", "Random Intercept and Random Slope Model", bty = "n")
sigma_rboth <- sigma.hat(bwt.mod.rboth)$sigma$data
sigma_rboth
coef_rboth <- as.numeric(coef(bwt.mod.rboth)$id[(n+1),])
coef_rboth
names(coef(bwt.mod.rboth)$id)
matrix_rboth
n.sims
sim_values_rboth
fit_rboth
lwr_rboth
upr_rboth
c(predictrows$day, rev(predictrows$day)
)
(lwr_rboth, rev(upr_rboth))
c(lwr_rboth, rev(upr_rboth))
setwd("~/Documents/Data Viz")
shiny::runApp('HW9')
runApp("AnjaniQuan5")
runApp("AnjaniQuan5")
#Homework 5
#used to import data properly for app
palette <- c("#56B4E9", "#F0E442", "#FF9999")
colorvec = c(palette[1], palette[2])
GDP = read.csv("GDP.csv", check.names = FALSE)
GDP = GDP[1:258,]
LifeExp = read.csv("lifeexpectancy.csv", check.names = FALSE)
LifeExp = LifeExp[1:258,]
InfantMortality = read.csv("infantmortality.csv", check.names = FALSE)
InfantMortality = InfantMortality[1:258,]
#create vectors of country names
countries <- as.character(GDP[,1])
countries <- as.character(LifeExp[,1])
#create usable data frames and matrices
IM2015Data <- data.frame(InfantMortality[colnames(InfantMortality) == "2015"], check.names = FALSE, row.names = countries)
IM2011Data <- data.frame(InfantMortality[colnames(InfantMortality) == "2011"], check.names = FALSE, row.names = countries)
LifeExp2015Data <- data.frame(LifeExp[colnames(LifeExp) == "2015"], check.names = FALSE, row.names = countries)
Data2015 <- data.frame(IM2015Data, LifeExp2015Data, check.names = FALSE, row.names = countries)
colnames(Data2015) = c("Infant Mortality", "Life Expectancy")
GDPData2011 <- data.frame(GDP[colnames(GDP) == "2011"], check.names = FALSE, row.names = countries)
GDPData2011 <- data.frame(GDPData2011[1:258,], check.names = FALSE, row.names = countries[1:258])
LifeExp2011Data <- data.frame(LifeExp[colnames(LifeExp) == "2011"], check.names = FALSE, row.names = countries)
Data2011 <- data.frame(GDPData2011, LifeExp2011Data, IM2011Data, check.names = FALSE, row.names = countries)
colnames(Data2011) = c("GDP", "Life Expectancy", "Infant Mortality")
Data2011Matrix <- as.matrix(Data2011)
#create groupings based on income and life expectancy
LowIncomeLowLE <- which(Data2011[,1] < 1045 & Data2011[,2] < 59)
LowIncomeMidLE <- which(Data2011[,1] < 1045 & Data2011[,2] < 74 & Data2011[,2] > 60)
LowIncomeHighLE <- which(Data2011[,1] < 1045 & Data2011[,2] > 75)
MiddleIncomeLowLE <- which(Data2011[,1] < 12736 & Data2011[,1] > 1045 & Data2011[,2] < 59)
MiddleIncomeMidLE <- which(Data2011[,1] < 12736 & Data2011[,1] > 1045 & Data2011[,2] < 74 & Data2011[,2] > 60)
MiddleIncomeHighLE <- which(Data2011[,1] < 12736 & Data2011[,1] > 1045 & Data2011[,2] > 75)
HighIncomeLowLE <- which(Data2011[,1] > 12736 & Data2011[,2] < 59)
HighIncomeMidLE <- which(Data2011[,1] > 12736 & Data2011[,2] < 74 & Data2011[,2] > 60)
HighIncomeHighLE <- which(Data2011[,1] > 12736 & Data2011[,2] > 75)
IM2015Data
Data2011
GDPData2011 <- data.frame(GDP[colnames(GDP) == "2011"], check.names = FALSE, row.names = countries)
GDPData2011
GDPData2011 <- data.frame(GDPData2011[1:258,], check.names = FALSE, row.names = countries[1:258])
GDPData2011
inf.mort.data <- data.frame(InfantMortality[colnames(InfantMortality) == "2003"], check.names = FALSE, row.names = countries)
life.exp.data <- data.frame(LifeExp[colnames(LifeExp) == "2003"], check.names = FALSE, row.names = countries)
gdp.data <- data.frame(GDP[colnames(GDP) == "2003"], check.names = FALSE, row.names = countries)
input.df <- data.frame(gdp.data, life.exp.data, inf.mort.data, check.names = FALSE, row.names = countries)
input.df
colnames(input.df) = c("GDP", "Life Expectancy", "Infant Mortality")
input.df
head(input.df)
input.matrix <- as.matrix(input.df)
input.matrix
runApp('HW9')
runApp('HW9')
runApp('HW9')
input.df
plot1 <- ggplot(data = input.df, mapping = aes(x = input.df[,2], y = input.df[,1], color = input.df[,3]))
+ labs(x = "Life Expectancy (years)", y = "GDP (USD)") + geom_point(size = 1.5)
+ scale_colour_gradientn(name = "Infant Mortality Rate", colours = colorvec)
+ scale_y_log10() + ggtitle("Indicators Around The World, 2011")
+ geom_hline(yintercept = as.numeric(input.country.data[1]), colour = palette[3])
+ geom_vline(xintercept = as.numeric(input.country.data[2]), colour = palette[3])
input.country.data <- input.df[rownames(input.df) == "United States",]
plot1 <- ggplot(data = input.df, mapping = aes(x = input.df[,2], y = input.df[,1], color = input.df[,3]))
+ labs(x = "Life Expectancy (years)", y = "GDP (USD)") + geom_point(size = 1.5)
+ scale_colour_gradientn(name = "Infant Mortality Rate", colours = colorvec)
+ scale_y_log10() + ggtitle("Indicators Around The World, 2011")
+ geom_hline(yintercept = as.numeric(input.country.data[1]), colour = palette[3])
+ geom_vline(xintercept = as.numeric(input.country.data[2]), colour = palette[3])
runApp('HW9')
runApp('HW9')
plot1 <- ggplot(data = input.df, mapping = aes(x = input.df[,2], y = input.df[,1], color = input.df[,3])) +
labs(x = "Life Expectancy (years)", y = "GDP (USD)") + geom_point(size = 1.5) +
scale_colour_gradientn(name = "Infant Mortality Rate", colours = colorvec) +
scale_y_log10() + ggtitle("Indicators Around The World, 2011") +
geom_hline(yintercept = as.numeric(input.country.data[1]), colour = palette[3]) +
geom_vline(xintercept = as.numeric(input.country.data[2]), colour = palette[3])
plot1
plot1 <- ggplot(data = input.df, mapping = aes(x = input.df[,2], y = input.df[,1], color = input.df[,3])) +
labs(x = "Life Expectancy (years)", y = "GDP (USD)") + geom_point(size = 1.5) +
scale_colour_gradientn(name = "Infant Mortality Rate", colours = colorvec) +
scale_y_log10() + ggtitle(paste0("Indicators Around The World ", input$year)) +
geom_hline(yintercept = as.numeric(input.country.data[1]), colour = palette[3]) +
geom_vline(xintercept = as.numeric(input.country.data[2]), colour = palette[3])
runApp('HW9')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
input.country.data
runApp('HW9Test')
runApp('HW9Test')
as.character(2011)
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
rm(list = ls())
runApp('HW9Test')
runApp('HW9Test')
input.df <- reactive({
data.frame(
Name = c("GDP", "Life Expectancy", "Infant Mortality"),
Value = c(data.frame(GDP[colnames(GDP) == as.character(input$year)], check.names = FALSE, row.names = countries),
data.frame(LifeExp[colnames(LifeExp) == as.character(input$year)], check.names = FALSE, row.names = countries),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(input$year)], check.names = FALSE, row.names = countries)),
stringsAsFactors = FALSE
)
})
input.df
input.df()
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
input.dftest <- data.frame(
Name = c("GDP", "Life Expectancy", "Infant Mortality"),
Value = c(data.frame(GDP[colnames(GDP) == as.character(2002)], check.names = FALSE, row.names = countries),
data.frame(LifeExp[colnames(LifeExp) == as.character(2002)], check.names = FALSE, row.names = countries),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(2002)], check.names = FALSE, row.names = countries)),
stringsAsFactors = FALSE
)
input.dftest
input.dftest <- data.frame(
Name = countries,
Value = c(data.frame(GDP[colnames(GDP) == as.character(2002)], check.names = FALSE, row.names = countries),
data.frame(LifeExp[colnames(LifeExp) == as.character(2002)], check.names = FALSE, row.names = countries),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(2002)], check.names = FALSE, row.names = countries)),
stringsAsFactors = FALSE
)
input.dftest
runApp('HW9Test')
input.dftest
class(input.dftest[252,1])
class(input.dftest[252,3])
class(input.dftest[252,2])
class(input.dftest[252,1])
input.dftest[252,1]
class(input.dftest[252,4])
runApp('HW9Test')
runApp('HW9Test')
LifeExp
View(LifeExp)
View(LifeExp[colnames(LifeExp) == "1950"])
runApp('HW9Test')
input.dftest <- data.frame(
Name = countries,
Value = c(data.frame(GDP[colnames(GDP) == as.character(1950)], check.names = FALSE, row.names = countries),
data.frame(LifeExp[colnames(LifeExp) == as.character(1950)], check.names = FALSE, row.names = countries),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(1950)], check.names = FALSE, row.names = countries)),
stringsAsFactors = FALSE)
input.dftest
input.dftest[,3]
runApp('HW9Test')
input.dftest
input.dftest[,1]
input.dftest[,2]
input.dftest[,3]
input.dftest[,1]
input.dftest[,2]
input.dftest[,3]
input.dftest[,4]
input.dftest
input.dftest <- data.frame(
Name = countries,
Value = c(data.frame(GDP[colnames(GDP) == as.character(2001)], check.names = FALSE, row.names = countries),
data.frame(LifeExp[colnames(LifeExp) == as.character(2001)], check.names = FALSE, row.names = countries),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(2001)], check.names = FALSE, row.names = countries)),
stringsAsFactors = FALSE)
input.dftest
input.dftest[,4]
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
input.country.datatest <- input.df[rownames(input.df) == "United States",]
input.df[rownames(input.df) == "United States",]
rownames(input.df) == "United States",
rownames(input.df) == "United States"
rm(list = ls())
input.country.datatest <- input.df[rownames(input.df) == "United States",]
runApp('HW9Test')
input.dftest <- data.frame(
Name = countries,
Value = c(data.frame(GDP[colnames(GDP) == as.character(2001)], check.names = FALSE, row.names = countries),
data.frame(LifeExp[colnames(LifeExp) == as.character(2001)], check.names = FALSE, row.names = countries),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(2001)], check.names = FALSE, row.names = countries)),
stringsAsFactors = FALSE)
input.country.data <- input.dftest[rownames(input.dftest) == "United States",]
input.country.data
input.dftest
input.country.data
input.country.data <- input.dftest[rownames(input.dftest) == "Zimbabwe",]
input.country.data
rownames(input.dftest)
runApp('HW9Test')
input.df <- data.frame(
Name = countries,
Value = c(data.frame(GDP[colnames(GDP) == as.character(2011)], check.names = FALSE, row.names = countries),
data.frame(LifeExp[colnames(LifeExp) == as.character((2011)], check.names = FALSE, row.names = countries),
data.frame(InfantMortality[colnames(InfantMortality) == as.character((2011)], check.names = FALSE, row.names = countries)),
stringsAsFactors = FALSE,
row.names = countries)
input.df <- data.frame(
Name = countries,
Value = c(data.frame(GDP[colnames(GDP) == as.character(2000)], check.names = FALSE),
data.frame(LifeExp[colnames(LifeExp) == as.character(2000)], check.names = FALSE),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(2000)], check.names = FALSE)),
stringsAsFactors = FALSE)
input.df
rownames(input.df)
input.df <- data.frame(
Value = c(data.frame(GDP[colnames(GDP) == as.character(2000)], check.names = FALSE),
data.frame(LifeExp[colnames(LifeExp) == as.character(2000)], check.names = FALSE),
data.frame(InfantMortality[colnames(InfantMortality) == as.character(2000)], check.names = FALSE)),
stringsAsFactors = FALSE,
row.names = countries)
input.df
rownames(input.df)
input.df
runApp('HW9Test')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
input.country.data
rownames(input.country.data)
runApp('HW9Test')
runApp('HW9Test')
test <- NULL
test
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test2')
mean(Data2011$Inf_Mort)
Data2011
Data2011$`Infant Mortality`
mean(Data2011$`Infant Mortality`)
Data2011 <- na.omit(Data2011)
colnames(Data2011) = c("GDP", "Life_Exp", "Inf_Mort")
mean(Data2011$Inf_Mort)
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
inf.color <- vector(length = length(Data2011$LowInfMort))
inf.color[Data2011$LowInfMort==1] <- "cornflowerblue"
inf.color[Data2011$LowInfMort==0] <- "coral"
inf.color
inf.color[1]
inf.color[0]
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW4')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
runApp('HW9Test/HW9Test2')
setwd("~/Documents/Data Viz/HW9Final")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
orderedGDPYearDataMatrixNoNA
GDPYearData <- data.frame(GDP[colnames(GDP) == selectedYear], check.names = FALSE, row.names = countries)
orderedGDPYearData <- GDPYearData[order(GDPYearData[,1]), , drop = FALSE]
orderedGDPYearDataMatrix <- as.matrix(orderedGDPYearData)
orderedGDPYearDataMatrixNoNA <- as.matrix(na.omit(orderedGDPYearData))
selectedCountry <- input$country1
GDPYearData <- data.frame(GDP[colnames(GDP) == 2011], check.names = FALSE, row.names = countries)
orderedGDPYearData <- GDPYearData[order(GDPYearData[,1]), , drop = FALSE]
orderedGDPYearDataMatrix <- as.matrix(orderedGDPYearData)
orderedGDPYearDataMatrixNoNA <- as.matrix(na.omit(orderedGDPYearData))
orderedGDPYearDataMatrixNoNA
orderedGDPYearDataMatrixNoNA[1,]
orderedGDPYearDataMatrixNoNA[,1]
orderedGDPYearDataMatrixNoNA[1]
orderedGDPYearDataMatrixNoNA[1,]
orderedGDPYearDataMatrixNoNA[,1]
rownames(orderedGDPYearDataMatrixNoNA)
runApp()
size(orderedGDPYearDataMatrixNoNA)
dim(orderedGDPYearDataMatrixNoNA)
dim(orderedGDPYearDataMatrixNoNA)[1]
runApp()
runApp()
runApp()
barplot(orderedGDPYearDataMatrixNoNA, axisnames = FALSE, main = paste0("GDP Per Capita in ", selectedYear), xlab = "Countries", ylab = "GDP Per Capita ($)", beside = TRUE, horiz = FALSE, col = ifelse(rownames(orderedGDPYearDataMatrixNoNA) == selectedCountry, "red", "cornflowerblue"), log = "y")
barplot(orderedGDPYearDataMatrixNoNA, axisnames = FALSE, main = paste0("GDP Per Capita in ", selectedYear), xlab = "Countries", ylab = "GDP Per Capita ($)", beside = TRUE, horiz = FALSE, col = ifelse(rownames(orderedGDPYearDataMatrixNoNA) == "United States", "red", "cornflowerblue"), log = "y")
barplot(orderedGDPYearDataMatrixNoNA, axisnames = FALSE, main = paste0("GDP Per Capita in ", 2011), xlab = "Countries", ylab = "GDP Per Capita ($)", beside = TRUE, horiz = FALSE, col = ifelse(rownames(orderedGDPYearDataMatrixNoNA) == "United States", "red", "cornflowerblue"), log = "y")
par()
par()[]
par()[1]
par()[3]
runApp()
par()$usr
par()$usr[3]
par("usr")[3] - 0.2
runApp()
runApp()
runApp()
country.labels == "France"
country.labels <- rownames(orderedGDPYearDataMatrixNoNA)
country.labels == "France"
orderedGDPYearDataMatrixNoNA
country.labels(country.labels == "France")
country.labels[country.labels == "France"]
country.labels(country.labels == "France")
country.labels[country.labels == "France"]
country.labels[1]
country.labels[1,1]
orderedGDPYearDataMatrixNoNA[rownames(orderedGDPYearDataMatrixNoNA) == "France"]
runApp()
runApp()
runApp()
runApp()
runApp()
rownames(orderedGDPYearDataMatrixNoNA) == "India"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
rsconnect::setAccountInfo(name='quanbui',
token='16930922677FF585E41ADFE735EAA8DE',
secret='<SECRET>')
rsconnect::setAccountInfo(name='quanbui',
token='16930922677FF585E41ADFE735EAA8DE',
secret='<SECRET>')
rsconnect::setAccountInfo(name='quanbui',
token='8085B7FCE2F06A8C403DD6851F636D97',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='quanbui', token='16930922677FF585E41ADFE735EAA8DE', secret='ZfQMEotlCyzZJZeZ4hIX7GE8stwrvYsxL15Rqow/')
deployApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
